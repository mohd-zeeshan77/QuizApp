# Quiz Application

A **Spring Boot Quiz Application** that allows users to take quizzes on various topics. The application supports user management (registration, login), JWT-based authentication, quiz creation, and performance tracking. It integrates with a MySQL database for persistent storage.

---

## Features

- User Management:
  - User Registration
  - User Login (with JWT Authentication)
  - Admin and User Roles
- Quizzes:
  - Multiple-choice questions
  - Create, Read, Update, and Delete (CRUD) for quizzes
  - Feedback and performance tracking
- JWT Authentication for secured endpoints
- MySQL Database Integration
- Fully Tested using JUnit and Spring Boot Test Framework

---

## Technology Stack

- **Backend**: Spring Boot (Java)
- **Database**: MySQL
- **Authentication**: JWT (JSON Web Tokens)
- **Dependencies**: Maven
- **Testing**: JUnit 5, Spring Boot Test

---

## Prerequisites

- **Java Development Kit (JDK)**: 17+
- **MySQL Server**: Ensure MySQL is running on your system
- **Maven**: Build tool to manage dependencies
- **Postman**: For testing REST APIs (Optional)
- **Lombok Plugin**: Ensure Lombok is installed in your IDE (like Eclipse or IntelliJ)

---

## Setup Instructions

### 1. Clone the Repository
```bash
git clone https://github.com/mohd-zeeshan77/QuizApp.git
cd QuizApp


## Configure the Application
In application.properties file
spring.datasource.url=jdbc:mysql://localhost:3306/quiz_app
spring.datasource.username=your_mysql_username
spring.datasource.password=your_mysql_password

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

## Build the application using Maven:

mvn clean install

## Run the application:

mvn spring-boot:run

The application will be accessible at: http://localhost:8080

## Project Structure
quiz-application
│
├── src/main/java/com/example/quizapp
│   ├── controller        # REST Controllers for APIs
│   ├── dto               # Data Transfer Objects (UserDTO, etc.)
│   ├── entity            # Entity Classes (User, Quiz, Question, etc.)
│   ├── exception         # Custom Exceptions (e.g., UserAlreadyExistsException)
│   ├── repository        # JPA Repositories
│   ├── security          # JWT Configuration (filters, utils)
│   ├── service           # Business Logic Layer
│   └── QuizAppApplication.java   # Main Application Class
│
├── src/main/resources
│   ├── application.properties  # Spring Boot Configuration
│   └── schema.sql              # (Optional) SQL for initializing tables
│
├── pom.xml               # Maven Configuration
└── README.md             # Project Documentation

## API Endpoints

# Authentication
Method	Endpoint	Description	Authorization
POST	/api/auth/register	User Registration	None
POST	/api/auth/login	User Login (returns JWT token)	None
# User Management
Method	Endpoint	Description	Authorization
GET	/api/users	Get All Users (Admin)	Admin
GET	/api/users/{id}	Get User by ID	Admin/User
# Quiz Management
Method	Endpoint	Description	Authorization
POST	/api/quizzes	Create a Quiz (Admin)	Admin
GET	/api/quizzes	Get All Quizzes	Any
GET	/api/quizzes/{id}	Get Quiz by ID	Any
PUT	/api/quizzes/{id}	Update Quiz (Admin)	Admin
DELETE	/api/quizzes/{id}	Delete Quiz (Admin)	Admin
POST	/api/quizzes/{id}/submit	Submit Answers and Get Feedback	User
